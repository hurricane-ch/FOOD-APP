#Change server port
server.port=8080
spring.main.allow-circular-references = true
# Connection url for the database "food_order_app_db"
spring.datasource.url = jdbc:mysql://localhost:3306/foodorderapp?createDatabaseIfNotExist=true&sessionVariables=sql_mode='NO_ENGINE_SUBSTITUTION'&jdbcCompliantTruncation=false

#Data Source Properties and MySQL
spring.datasource.driverClassName = com.mysql.cj.jdbc.Driver

# Username and password
spring.datasource.username = root
spring.datasource.password = root

#JPA Properties
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect
spring.jpa.properties.hibernate.format_sql = TRUE
spring.jpa.open-in-view = false

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in the project
spring.jpa.hibernate.ddl-auto=update

#Show SQL executed with parameter bindings
#logging.level.org.hibernate.SQL = DEBUG
#logging.level.org.hibernate.type.descriptor = TRACE

# Social login provider props
spring.security.oauth2.client.registration.google.clientId=612589352024-jti255r41toqkk0ool336jubnm0hfjr0.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.clientSecret=xJchff6oOh2xHwz_Cwo1oGLv

app.auth.tokenSecret=926D96C90030DD58429D2751AC1BDBBC
app.auth.tokenExpirationMsec=864000000
# After successfully authenticating with the OAuth2 Provider,
# we'll be generating an auth token for the user and sending the token to the
# redirectUri mentioned by the frontend client in the /oauth2/authorization request.
# We're not using cookies because they won't work well in mobile clients.
app.oauth2.authorizedRedirectUris=http://localhost:8081/oauth2/redirect,myandroidapp://oauth2/redirect,myiosapp://oauth2/redirect
# For detailed logging during development
#logging.level.com=TRACE
logging.level.org.springframework=TRACE
#logging.level.org.hibernate.SQL=TRACE
#logging.level.org.hibernate.type=TRACE